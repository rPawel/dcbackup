#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys
import logging
import socket

from inputplugins import datavolume
from inputplugins import mysql
from dockerutil import compose

import bootstrap


def backup_all_apps(all_apps_path, backup_path):
    app_compose_paths = compose.find_configs(all_apps_path)
    logging.info("Backing up: " + str(len(app_compose_paths)) + " applications")
    for app_compose_path in app_compose_paths:
        app_path = os.path.dirname(app_compose_path)
        process_app(app_path, backup_path)


def backup_app(app_path, backup_path):
    process_app(app_path, backup_path)


def restore_app():
    pass


def restore_all_apps():
    pass


def process_app(app_path, backup_dir):
    app_dir_name = os.path.basename(app_path)
    app_data_path = app_path + "/data"
    backup_folder = build_app_backup_path(backup_dir, app_dir_name)

    logging.info("Backing up: " + app_path)
    mysql.backup(app_path, app_data_path)
    datavolume.backup(app_path, backup_folder)


def build_app_backup_path(backup_dir, app_dir_name):
    return backup_dir + "/" + app_dir_name + "@" + socket.getfqdn()


def sqr():
    logging.warning("Not implemented")
    sys.exit(1)


def main():
    params = bootstrap.get_input_params()
    execute_command(params.command, params)
    logging.info('Done')


def execute_command(command, params):
    if not os.access(params.apps_path, os.R_OK):
        logging.error("Could not read: " + params.apps_path)
        sys.exit(1)
    if command == 'backup':
        if os.access(params.apps_path + '/docker-compose.yml', os.R_OK):
            backup_app(params.apps_path, params.backup_path)
        else:
            backup_all_apps(params.apps_path, params.backup_path)
    elif command == 'restore':
        sqr()
    else:
        sqr()


if __name__ == "__main__":
    main()
